from fryhcs import Element

def App():
  <template>
    <div h-screen w-screen>
      <Header />
      <Body />
    </div>
  </template>

def Header():
  <template>
    <div fixed top-0 w-full h-20px bg-blue-400>
    </div>
  </template>
  <script>
  </script>

def Body():
  <template>
    <div flex mt-20px h-full w-full>
      <SideBar/>
      <Main ref=(editor) />
      <Preview ref=(preview) />
    </div>
  </template>
  <script>
    import { marked } from "marked";
    import { effect } from "fryhcs";
    effect(function() {
      const htmlContent = marked(editor.markdownText.value);
      preview.innerHTML = htmlContent;
    });
  </script>

def SideBar():
  <template>
    <div w-1/5 h-full bg-yello-200>
    </div>
  </template>
  <script>
  </script>

def Main():
  <template>
    <div ref=(editor) w-2/5 h-full bg-cyan-300>
    </div>
  </template>
  <script>
    import { EditorState } from "@codemirror/state";
    import { EditorView, basicSetup } from "codemirror";
    import { markdown } from "@codemirror/lang-markdown";
    import { vim } from "@replit/codemirror-vim";
    import { signal } from "fryhcs";

    let markdownText = signal('');
    const autoRenderer = EditorView.updateListener.of((update) => {
        if (update.changes) {
            markdownText.value = view.state.doc.toString();
        }
    });
    const state = EditorState.create({
      doc: "1\n2\n3\n4\n5\n6\n7\n8\n9\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n0",
      extensions: [
        vim(),
        basicSetup,
        markdown(),
        autoRenderer,
      ]
    })
    const view = new EditorView({
      state,
      parent: editor
    });
    view.focus();
    export default { markdownText };
  </script>

def Preview():
  <template>
    <div ref=(preview) w-2/5 h-full bg-yello-200>
    </div>
  </template>
  <script>
    export default preview;
  </script>