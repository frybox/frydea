from datetime import datetime
from fryhcs import Element
from fryui import HCenter, Icon, Button
from frydea.models import Card as CardModel

def App(cards=None):
  cards = [] if not cards else cards
  <template>
    <div h-screen w-screen overflow-x-auto>
      <Header />
      <Body {cards}/>
    </div>
  </template>

def Header():
  <template>
    <div fixed top-0 w-full h-30px z-100 bg-primary>
    </div>
  </template>
  <script>
  </script>

def Body(cards=None):
  <template>
    <div flex mt-30px h-sub,100%,30px w-full>
      <SideBar/>
      <Main {cards}/>
    </div>
  </template>
  <script>
  </script>

def SideBar():
  <template>
    <div box-border h-full w-30px bg-secondary>
    </div>
  </template>
  <script>
  </script>

def Main(cards=None):
  left = <Index />
  right = <Preview />
  <template>
    <div box-border w-sub,100%,30px mx-auto h-full bg-gray-bg>
      <HCenter {left} {right}>
        <Content {cards} width="3fr" />
      </HCenter>
    </div>
  </template>
  <script>
  </script>

def Index():
  <template>
    <div bg-secondary-bga>
    </div>
  </template>

def Preview():
  card = CardModel()
  card.update_time = datetime.now()
  <template>
    <div box-border h-full bg-secondary-bgx overflow-auto>
      <PreviewCard frytemplate ref=(template) {card} />
    </div>
  </template>
  <script>
  </script>

def Content(cards=None):
  cards = cards if cards else []
  card = CardModel()
  card.update_time = datetime.now()
  <template>
    <div ref=(container) bg-primary-elx box-border h-full overflow-auto>
      <EditorCard frytemplate ref=(template) {card} />
      {<EditorCard {card}/> for card in cards}
      <div ref=(oparea) w-full text-center mt-30px>
        <Button @click=(onclick) wide info>
          <Icon type="plus" class="h-8 w-8"/>
        </Button>
      </div>
    </div>
  </template>
  <script>
    const onclick = async () => {
        const newcard = await template.generate();
        newcard.createEditor();
        container.insertBefore(newcard.domElement, oparea);
    };
  </script>

def EditorCard(card):
  time = card.update_time.strftime('%Y-%m-%d %H:%M')
  <template>
    <div w-full min-h-200px mb-20px
         border border-gray-bdx rounded-md
         flex flex-col
         tabindex="-1"
         @keydown=(handleKey)>
      <div flex-none h-30px w-full
           flex justify-between 
           bg-gray-el border border-gray-bdx>
        <div flex>
          <Icon type="file-text"/>
          <p>[{card.number}](numberSignal)</p>
        </div>
        <p>[{time}](timeSignal)</p>
      </div>
      <div ref=(elContent)
           flex-auto w-full
           bg-secondary-bg overflow-hidden>
      </div>
      <div flex-none w-full h-30px
           bg-gray-el border border-gray-bdx>
      </div>
    </div>
  </template>
  <script card={card.todict()}>
    import dayjs from "dayjs";
    import { EditorState } from "@codemirror/state";
    import { EditorView, basicSetup } from "codemirror";
    import { markdown } from "@codemirror/lang-markdown";
    import { vim, CodeMirror, getCM, Vim } from "@replit/codemirror-vim";
    import { signal } from "fryhcs";
    import { setCard } from "./data.js";
    import { oneDark } from "@codemirror/theme-one-dark";

    let editor;

    const handleKey = (e) => {
      console.log(`e.key = ${e.key}`);
      if (e.key === 'i') {
        editor.focus();
        e.preventDefault();
      }
    };

    const getTime = (card) => dayjs(card.update_time).format('YYYY-MM-DD HH:mm');

    const numberSignal = signal(card.number);
    const timeSignal = signal(getTime(card));
    const contentSignal = signal(card.content);
    let version = card.version;

    CodeMirror.commands.save = async () => {
      const baseUrl = window.location.origin;
      const content = contentSignal.peek()
      let returned;
      if (numberSignal.peek()) {
        const url = baseUrl + `/cards/${numberSignal.peek()}`;
        const data = {
          content: content,
          last_version: version,
        }
        const response = await fetch(url, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });
        const result = await response.json();
        if (result.code === 0) {
          console.log('saved');
          returned = result.card;
        } else {
          console.log(result.msg);
        }
      } else {
        const url = baseUrl + '/cards';
        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({content}),
        });
        const result = await response.json();
        if (result.code === 0) {
          console.log('saved');
          returned = result.card;
        } else {
          console.log(result.msg);
        }
      }
      if (returned) {
        numberSignal.value = returned.number;
        timeSignal.value = getTime(returned);
        version = returned.version;
      }
    };

    const createDoc = () => {
      const updator = EditorView.updateListener.of((update) => {
          if (update.changes) {
              contentSignal.value = editor.state.doc.toString();
          }
      });
      const frytheme = EditorView.theme({
          "&": {
            color: "white",
            backgroundColor: "#034"
          },
          ".cm-content": {
            caretColor: "#0e9",
            fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,"Liberation Mono", "Courier New", monospace',
          },
          "&.cm-focused .cm-cursor": {
            borderLeftColor: "#0e9"
          },
          "&.cm-focused .cm-selectionBackground, ::selection": {
            backgroundColor: "#074"
          },
          ".cm-gutters": {
            backgroundColor: "#045",
            color: "#ddd",
            border: "none"
          }
        }, {dark: true})

      const state = EditorState.create({
        doc: contentSignal.peek(),
        extensions: [
          vim(),
          basicSetup,
          markdown(),
          EditorView.lineWrapping,
          updator,
          frytheme,
          oneDark,
        ]
      })
      return state;
    }

    const createEditor = () => {
      const state = createDoc();
      if (editor) {
        editor.setState(state);
      } else {
        elContent.innerHTML = '';
        editor = new EditorView({
          state,
          parent: elContent,
        });
      }
      const cm = getCM(editor);
      const vim = cm.state.vim;
      CodeMirror.on(cm, 'inputEvent', (e) => {
        if (e.type === 'handleKey') {
          console.log(`handleKey input event with ${e.key}`);
          //if (vim && !vim.insertMode && !vim.visualMode && e.key === '<Esc>') {
          //  cm.blur();
          //}
        }
      });
      CodeMirror.on(cm, 'vim-keypress', (key) => {
        console.log(`vim-keypress ${key}`);
      })

      Vim.defineAction('toCardMode', (cm, args) => {
        console.log('blurblur');
        console.log(cm.cm6.dom);
        cm.cm6.dom.parentElement.parentElement.focus();
        //cm.cm6.scrollDOM.focus();
      });
      Vim.mapCommand('<Esc>', 'action', 'toCardMode', {}, {context: 'normal'});

      editor.focus();
    }

    export default {
      createEditor,
    }
  </script>


def PreviewCard(card):
  time = card.update_time.strftime('%Y-%m-%d %H:%M')
  cardId = card.id
  <template>
    <div w-full min-h-200px mb-20px
         border border-gray-bdx rounded-md
         flex flex-col
         tabindex="-1">
      <div flex-none h-30px w-full
           flex justify-between 
           bg-gray-el border border-gray-bdx>
        <div flex>
          <Icon type="file-text"/>
          <p ref=(elNumber)>{card.number}</p>
        </div>
        <p ref=(elUpdateTime)>{time}</p>
      </div>
      <div ref=(elContent)
           flex-auto w-full
           bg-secondary-bg overflow-hidden font-mono>
      </div>
      <div flex-none w-full h-30px
           bg-gray-el border border-gray-bdx>
      </div>
    </div>
  </template>
  <script {cardId}>
    import * as dayjs from "dayjs";
    import { marked } from "marked";
    import { getCard } from "./data.js";
    import { effect } from "fryhcs";

    let current = getCard(cardId);

    const dispose = effect(() => {
      elContent.innerHTML = marked(current.content.value);
      elUpdateTime.textContent = dayjs(card.update_time).format('YYYY-MM-DD HH:mm');
    });

    export default { dispose };
  </script>