from fryhcs import Element
from fryui import Icon
from frydea.models import Card

def Preview():
  card = Card()
  <template>
    <div ref=(container)
         box-border h-full bg-secondary-bgx
         h-full overflow-auto p-4px
         @keydown=(handleCardKey)>
      <PreviewCard frytemplate ref=(template) {card} />
    </div>
  </template>
  <script>
    const previewCards = [];
    const newCard = async ({card, cardId}) => {
      const newcard = await template.create({card, cardId});
      container.appendChild(newcard.fryelement);
      previewCards.push(newcard);
      newcard.fryelement.scrollIntoView();
    }
    this.preview = async ({card, cardId}) => {
      for (const pc of previewCards) {
        if (cardId === pc.model.cardId) {
            pc.fryelement.scrollIntoView();
            return
        }
      }
      await newCard({card, cardId});
    }
    this.closest = (y) => {
      let delta = 999999999;
      let card = null;
      for (const c of previewCards) {
        const rect = c.fryelement.getBoundingClientRect();
        const middle = rect.top + rect.height/2;
        const d = Math.abs(middle-y);
        if (d < delta) {
          delta = d;
          card = c;
        }
      }
      return card;
    }
    const handleCardKey = (e) => {
      console.log(e);
      if (!e.target.frycomponents) {
        return;
      }
      let currentCard = e.target.frycomponents[0];
      const closestEditCard = () => {
        if (this.isReady) {
          let rect = currentCard.fryelement.getBoundingClientRect();
          console.log(rect);
          let middle = rect.top + rect.height/2;
          return this.g.editArea.closest(middle);
        }
      }
      const moveDown = () => {
        const index = previewCards.indexOf(currentCard);
        if (index >= 0 && index+1 < previewCards.length) {
          currentCard = previewCards[index+1];
          currentCard.focus();
        }
      }
      const moveUp = () => {
        const index = previewCards.indexOf(currentCard);
        if (index > 0) {
          currentCard = previewCards[index-1];
          currentCard.focus();
        }
      }
      const moveLeft = () => {
        const editCard = closestEditCard();
        if (editCard) editCard.focus();
        console.log('moveLeft');
      }
      const moveEnd = (last=flase) => {
        if (previewCards.length > 0) {
          if (last) {
            previewCards[previewCards.length-1].focus();
          } else {
            previewCards[0].focus();
          }
        }
      }
      const closeCard = (all=false) => {
        let nextCard;
        if (all) {
            nextCard = closestEditCard();
            for (const card of previewCards) {
                card.close();
            }
            previewCards.length = 0;
        } else {
            const index = previewCards.indexOf(currentCard);
            if (index > 0) {
                nextCard = previewCards[index - 1];
            } else if (index < previewCards.length - 1) {
                nextCard = previewCards[index + 1];
            } else {
                nextCard = closestEditCard();
            }
            currentCard.close();
            previewCards.splice(index, 1);
        }
        if (nextCard) nextCard.focus();
        console.log('closeCard');
      }
      const broadenCard = () => {
        this.fryparent.narrow();
      }
      const narrowCard = () => {
        this.fryparent.broaden();
      }
      const cardKeyMap = {
        Enter: moveDown,
        Space: moveDown,
        KeyJ: moveDown,
        ArrowDown: moveDown,
        KeyK: moveUp,
        ArrowUp: moveUp,
        KeyH: moveLeft,
        ArrowLeft: moveLeft,
        KeyG: () => moveEnd(e.shiftKey),
        KeyC: () => closeCard(e.shiftKey),
        KeyD: () => closeCard(e.shiftKey),
        KeyB: broadenCard,
        KeyN: narrowCard,
      }
      if (e.code in cardKeyMap) {
        cardKeyMap[e.code]();
      }
    };
  </script>

def PreviewCard(card):
  time = card.update_time.strftime('%Y-%m-%d %H:%M')
  cid = card.id if card.id else 0
  <template>
    <div mx-4px w-sub,100%,8px mb-20px
         border border-gray-bdx rounded-md
         shadow hover:shadow-md
         focus="outline outline-4 outline-primaryax"
         flex flex-col
         tabindex="-1"
         ref=(elContainer)>
      <div flex-none h-20px w-full px-5px py-2px
           flex justify-between 
           text-12px text-grayx
           bg-gray-el border-b border-gray-bdx rounded-t-md>
        <div flex>
          <Icon type="file-text" />
          <p>[{cid}](cardModel.displayName)</p>
        </div>
        <p>[{time}](cardModel.displayTime)</p>
      </div>
      <div ref=(elContent)
           flex-auto w-full
           p-5px
           bg-secondary-bg overflow-hidden text-14px>
      </div>
    </div>
  </template>
  <script card={card.todict()} cardId={0}>
    import * as dayjs from "dayjs";
    import { marked } from "marked";
    import { cardManager } from "./frydea.js";
    import { effect } from "fryhcs";

    let cardModel;
    if (cardId) {
      cardModel = cardManager.getCard(cardId);
    } else {
      cardModel = await cardManager.createCard(card);
    }

    this.dispose = effect(() => {
      elContent.innerHTML = marked(cardModel.content.value);
    });
    this.focus = () => {
      elContainer.focus();
    }
    this.close = () => {
      elContainer.remove();
      if (this.dispose) {
        this.dispose();
        this.dispose = null;
      }
    }
    this.model = cardModel;
  </script>