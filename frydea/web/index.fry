from fryhcs import Element
from fryui import Icon
from frydea.models import Card

def YearGroup(begin_year, card_counts):
  names = [str(begin_year)];
  years = [begin_year]
  for i in range(1, len(card_counts)):
      year = begin_year + i
      name = str(year)
      years.append(year)
      names.append(name[2:])
  allbg = ['bg-blue-1', 'bg-blue-3', 'bg-blue-5', 'bg-blue-7', 'bg-blue-9',]
  bgs = [[allbg[int(count/10) if count < 50 else 4]] for count in card_counts]
  <template>
    <div flex gap-1>
      {<span refall=(elYears) {*bgs[i]}
             border rounded-md 
             text-sm
             tabindex="-1"
             focus="outline outline-4 outline-primaryax">
         {names[i]}
       </span>
       for i in range(len(names))}
    </div>
  </template>
  <script {years}>
    this.focus = () => {
      if (elYears && elYears.length > 0) {
        elYears[elYears.length-1].focus();
      }
    };
  </script>

def DayIndex(day, count):
  <template>
    <li tabindex="-1"
        focus="outline outline-4 outline-primaryax">
      <span mr-5px text-sm>[{day}](daySignal)</span>
      <span text-info text-xs>[{count}](countSignal)</span>
     </li>
  </template>
  <script {day} {count}>
    import {signal} from "fryhcs";
    const daySignal = signal(day);
    const countSignal = signal(count);
    this.focus = () => { this.fryelement.focus(); };
    this.update = (day, count) => {
      daySignal.value = day;
      countSignal.value = count;
    }
  </script>
    

def Index(year_counts, day_count):
  <template>
    <div ref=(container)
         box-border bg-secondary-bgx
         p-4px h-full overflow-auto
         @keydown=(handleCardKey)>
      <div>
        {<YearGroup refall=(yearGroups) {begin_year} {card_counts} />
         for begin_year, card_counts in year_counts}
      </div>
      <ul mt-15px>
        {<DayIndex refall=(dayIndexes) {day} {count} />
         for day, count in day_count}
      </ul>
    </div>
  </template>
  <script>
    import { cardManager } from './frydea.js';

    const yearMap = new Map();

    for (const cid of cardManager.cid2timeMap.keys()) {
        const time = cardManager.cid2timeMap.get(cid);
        const year = time.getFullYear();
        let dayMap;
        if (!yearMap.has(year)) {
            dayMap = new Map();
            yearMap.set(year, dayMap);
        } else {
            dayMap = yearMap.get(year);
        }
        const day = `${year}/${time.getMonth()+1}/${time.getDate()}`;
        let cidList;
        if (!dayMap.has(day)) {
            cidList = [];
            dayMap.set(day, cidList);
        } else {
            cidList = dayMap.get(day);
        }
        cidList.push(cid);
    }
    const handleCardKey = (e) => {
      console.log(e);
      if (!e.target.frycomponents) {
        return;
      }
      let currentCard = e.target.frycomponents[0];
      const closestEditCard = () => {
        if (this.isReady) {
          let rect = currentCard.fryelement.getBoundingClientRect();
          console.log(rect);
          let middle = rect.top + rect.height/2;
          return this.g.editArea.closest(middle);
        }
      }
      const moveDown = () => {
        const index = previewCards.indexOf(currentCard);
        if (index >= 0 && index+1 < previewCards.length) {
          currentCard = previewCards[index+1];
          currentCard.focus();
        }
      }
      const moveUp = () => {
        const index = previewCards.indexOf(currentCard);
        if (index > 0) {
          currentCard = previewCards[index-1];
          currentCard.focus();
        }
      }
      const moveRight = () => {
        let rect = currentItem.fryelement.getBoundingClientRect();
        console.log(rect);
        let middle = rect.top + rect.height/2;
        const previewCard = this.g.previewArea.closest(middle);
        if (previewCard) previewCard.focus();
        console.log('moveRight');
      }
      const closeCard = (all=false) => {
        let nextCard;
        if (all) {
            nextCard = closestEditCard();
            for (const card of previewCards) {
                card.close();
            }
            previewCards.length = 0;
        } else {
            const index = previewCards.indexOf(currentCard);
            if (index > 0) {
                nextCard = previewCards[index - 1];
            } else if (index < previewCards.length - 1) {
                nextCard = previewCards[index + 1];
            } else {
                nextCard = closestEditCard();
            }
            currentCard.close();
            previewCards.splice(index, 1);
        }
        if (nextCard) nextCard.focus();
        console.log('closeCard');
      }
      const broadenCard = () => {
        this.fryparent.narrow();
      }
      const narrowCard = () => {
        this.fryparent.broaden();
      }
      const cardKeyMap = {
        KeyJ: moveDown,
        ArrowDown: moveDown,
        KeyK: moveUp,
        ArrowUp: moveUp,
        KeyL: moveRight,
        ArrowRight: moveRight,
        KeyC: () => closeCard(e.shiftKey),
        KeyD: () => closeCard(e.shiftKey),
        KeyB: broadenCard,
        KeyN: narrowCard,
      }
      if (e.code in cardKeyMap) {
        cardKeyMap[e.code]();
      }
    };

    this.closest = (y) => {
      let delta = 999999999;
      let item = null;
      for (const i of yearGroups) {
        const rect = i.fryelement.getBoundingClientRect();
        const middle = rect.top + rect.height/2;
        const d = Math.abs(middle-y);
        if (d < delta) {
          delta = d;
          item = i;
        }
      }
      for (const i of dayIndexes) {
        const rect = i.fryelement.getBoundingClientRect();
        const middle = rect.top + rect.height/2;
        const d = Math.abs(middle-y);
        if (d < delta) {
          delta = d;
          item = i;
        }
      }
      return item;
    }
  </script>
