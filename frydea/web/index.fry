from fryhcs import Element
from fryui import Icon
from frydea.models import Card
from datetime import datetime

def YearGroup(begin_year, card_counts, current_year):
  names = [str(begin_year)];
  years = [begin_year]
  for i in range(1, len(card_counts)):
      year = begin_year + i
      name = str(year)
      years.append(year)
      names.append(name[2:])
  styles = [['bg-blue-1'] for count in card_counts]
  current_index = current_year - begin_year
  if current_index >= 0 and current_index < len(card_counts):
    styles[current_index] = ['bg-secondary-elx', 'outline', 'outline-2', 'outline-primaryax']
  <template>
    <div flex gap-1>
      {<span refall=(elYears) {*styles[i]} cursor-pointer 
             border border-gray-bdx rounded-md p-1
             text-sm
             tabindex="-1"
             focus="outline outline-4 outline-primaryax">
         {names[i]}
       </span>
       for i in range(len(names))}
    </div>
  </template>
  <script {years}>
    this.focus = (index=-1) => {
      if (elYears && elYears.length > 0) {
        if (index < 0) index += elYears.length;
        if (index < 0) index = 0;
        if (index >= elYears.length) index = elYears.length-1;
        elYears[index].focus();
      }
    };
    this.indexOf = (element) => {
        return elYears.indexOf(element);
    }
    this.yearOf = (element) => {
      const index = elYears.indexOf(element);
      if (index >= 0) {
        return years[index];
      }
    }
    this.turnLeft = (current) => {
        const index = elYears.indexOf(current);
        if (index > 0) {
            const next = elYears[index-1];
            next.focus();
            return true;
        }
    }
    this.turnRight = (current) => {
        const index = elYears.indexOf(current);
        if (index >= 0 && index < elYears.length - 1) {
            const next = elYears[index+1];
            next.focus();
            return true;
        }
        return false;
    }
    this.updateSelection = (selectedYear) => {
        for (let i=0; i<years.length; i++) {
            if (years[i] === selectedYear) {
                elYears[i].classList.add('bg-secondary-elx');
                elYears[i].classList.remove('bg-blue-1');
            } else {
                elYears[i].classList.remove('bg-secondary-elx');
                elYears[i].classList.add('bg-blue-1');
            }
        }
    }
    this.isYear = true;
    this.isDay = false;
  </script>

def DayIndex(day='', count=0):
  <template>
    <li ref=(element)
        cursor-pointer
        tabindex="-1"
        focus="outline outline-4 outline-primaryax">
      <span mr-5px text-sm>[{day}](daySignal)</span>
      <span text-info text-xs>[{count}](countSignal)</span>
     </li>
  </template>
  <script {day} {count}>
    import {signal} from "fryhcs";
    const daySignal = signal(day);
    const countSignal = signal(count);
    this.focus = () => { this.fryelement.focus(); };
    this.update = (day, count) => {
      daySignal.value = day;
      countSignal.value = count;
    }
    this.updateCount = (count) => {
      countSignal.value = count;
    }
    this.updateSelection = (selectedDay) => {
        if (this.day === selectedDay) {
          element.classList.add('bg-secondary-elx');
        } else {
          element.classList.remove('bg-secondary-elx');
        }
    }
    Object.defineProperty(this, 'day', {get() {return daySignal.peek();}});
    Object.defineProperty(this, 'count', {get() {return countSignal.peek();}});
    this.isYear = false;
    this.isDay = true;
  </script>
    

def Index(cidtimes):
  current_year = datetime.now().year
  years = {}
  days = {}
  for cid, time in cidtimes:
    year = time.year
    if year not in years:
      years[year] = 1
    else:
      years[year] += 1
    if year == current_year:
      day = f"{year}-{time.month:02}-{time.day:02}"
      if day not in days:
        days[day] = 1
      else:
        days[day] += 1
  first_years = set()
  group_size = 5 if len(years) < 20 else 10
  for year in years.keys():
    first_years.add(year - year % group_size)
  first_years = sorted(first_years)
  year_counts = []
  for first_year in first_years:
    last_year = first_year + group_size
    counts = [years[year] if year in years else 0 for year in range(first_year, last_year)]
    year_counts.append((first_year, counts))
  day_count = [(day, count) for day, count in days.items()]

  <template>
    <div ref=(container)
         box-border bg-secondary-bgx
         p-4px h-full overflow-auto
         @keydown=(handleIndexKey)
         @click=(handleClick)>
      <div>
        {<YearGroup refall=(yearGroups) {begin_year} {card_counts} {current_year} />
         for begin_year, card_counts in year_counts}
      </div>
      <DayIndex frytemplate ref=(dayTemplate) />
      <ul ref=(dayContainer) mt-15px>
        {<DayIndex refall=(dayIndexes) {day} {count} />
         for day, count in day_count}
      </ul>
    </div>
  </template>
  <script selectedYear={current_year}>
    import { cardManager } from './frydea.js';

    yearGroups = yearGroups ? yearGroups : [];
    dayIndexes = dayIndexes ? dayIndexes : [];

    const domComponent = (element) => {
      while (element) {
        if (element.frycomponents && element.frycomponents.length > 0) {
          const len = element.frycomponents.length;
          return element.frycomponents[len-1];
        }
        element = element.parentElement;
      }
    }

    const removeDay = (day) => {
      const index = dayIndexes.indexOf(day);
      if (index >= 0) {
        dayIndexes.splice(index, 1);
        day.fryelement.remove();
      }
    }

    const appendDay = async (args) => {
      const day = await dayTemplate.create(args);
      dayContainer.appendChild(day.fryelement);
      dayIndexes.push(day);
    }

    const selectYear = async (year) => {
      if (year === selectedYear) return;
      selectedYear = year;
      for (const yearGroup of yearGroups) {
        yearGroup.updateSelection(selectedYear);
      }
      const dayMap = cardManager.yearMap.get(year);
      const days = dayMap ? Array.from(dayMap.keys()) : [];
      days.sort();
      const extra = dayIndexes.length - days.length;
      for (let i=0; i<extra; i++) {
        removeDay(dayIndexes[0]);
      }
      for (let i=0; i<dayIndexes.length; i++) {
        const day = days[i];
        const count = dayMap.get(day).length;
        dayIndexes[i].update(day, count);
      }
      for (let i=dayIndexes.length; i<days.length; i++) {
        const day = days[i];
        const count = dayMap.get(day).length;
        await appendDay({day, count});
      }
    }

    const selectDay = async (day) => {
      const dayMap = cardManager.yearMap.get(selectedYear);
      if (dayMap) {
        let cids = dayMap.get(day);
        cids = cids ? cids : [];
        cids.sort((a,b)=>b-a);
        for (const cid of cids) {
          await this.g.editArea.openCard(cid);
        }
        for (const dayIndex of dayIndexes) {
          dayIndex.updateSelection(day);
        }
      }
    }

    const selectElement = async (element) => {
      let item = domComponent(element);
      if (item.isYear) {
        const year = item.yearOf(element);
        await selectYear(year);
      } else {
        const day = item.day;
        await selectDay(day);
      }
    }

    const handleClick = async (e) => {
        await selectElement(e.target);
    }

    const handleIndexKey = (e) => {
      console.log(e);
      let currentItem = domComponent(e.target);
      const selectItem = async () => {
        e.preventDefault();
        await selectElement(e.target);
      }
      const moveDown = () => {
        if (currentItem.isYear) {
            const yearIndex = currentItem.indexOf(e.target);
            const groupIndex = yearGroups.indexOf(currentItem);
            if (groupIndex >= 0 && groupIndex < yearGroups.length-1) {
                const next = yearGroups[groupIndex+1];
                next.focus(yearIndex);
            } else if (dayIndexes.length > 0) {
                dayIndexes[0].focus();
            }
        } else {
            const dayIndex = dayIndexes.indexOf(currentItem);
            if (dayIndex >= 0 && dayIndex < dayIndexes.length-1) {
                const next = dayIndexes[dayIndex+1];
                next.focus();
            }
        }
      }
      const moveUp = () => {
        if (currentItem.isYear) {
            const yearIndex = currentItem.indexOf(e.target);
            const groupIndex = yearGroups.indexOf(currentItem);
            if (groupIndex > 0) {
                const prev = yearGroups[groupIndex-1];
                prev.focus(yearIndex);
            } else if (groupIndex === 0 && yearIndex > 0) {
                currentItem.focus(0);
            }
        } else {
            const dayIndex = dayIndexes.indexOf(currentItem);
            if (dayIndex > 0) {
                const prev = dayIndexes[dayIndex-1];
                prev.focus();
            } else if (dayIndex === 0 && yearGroups.length > 0) {
                const len = yearGroups.length;
                yearGroups[len-1].focus(0);
            }
        }
      }
      const moveEnd = (last=flase) => {
        if (last) {
          if (dayIndexes.length > 0) {
            const len = dayIndexes.length;
            dayIndexes[len-1].focus();
          } else if (yearGroups.length > 0) {
            const len = yearGroups.length;
            yearGroups[len-1].focus(-1);
          }
        } else {
          if (yearGroups.length > 0) {
            yearGroups[0].focus(0);
          } else if (dayIndexes.length > 0) {
            dayIndexes[0].focus();
          }
        }
      }
      const moveLeft = () => {
        if (currentItem.isYear) {
            currentItem.turnLeft(e.target);
        }
      }
      const moveRight = () => {
        if (currentItem.isYear && currentItem.turnRight(e.target)) {
            return;
        }
        let rect = currentItem.fryelement.getBoundingClientRect();
        console.log(rect);
        let middle = rect.top + rect.height/2;
        const editItem = this.g.editArea.closest(middle);
        if (editItem) editItem.focus();
        console.log('moveRight');
      }
      const broadenIndex = () => {
        this.fryparent.narrow();
      }
      const narrowIndex = () => {
        this.fryparent.broaden();
      }
      const indexKeyMap = {
        Enter: selectItem,
        Space: selectItem,
        KeyJ: moveDown,
        ArrowDown: moveDown,
        KeyK: moveUp,
        ArrowUp: moveUp,
        KeyH: moveLeft,
        ArrowLeft: moveLeft,
        KeyL: moveRight,
        ArrowRight: moveRight,
        KeyG: () => moveEnd(e.shiftKey),
        KeyB: broadenIndex,
        KeyN: narrowIndex,
      }
      if (e.code in indexKeyMap) {
        indexKeyMap[e.code]();
      }
    };

    this.closest = (y) => {
      let delta = 999999999;
      let item = null;
      for (const i of yearGroups) {
        const rect = i.fryelement.getBoundingClientRect();
        const middle = rect.top + rect.height/2;
        const d = Math.abs(middle-y);
        if (d < delta) {
          delta = d;
          item = i;
        }
      }
      for (const i of dayIndexes) {
        const rect = i.fryelement.getBoundingClientRect();
        const middle = rect.top + rect.height/2;
        const d = Math.abs(middle-y);
        if (d < delta) {
          delta = d;
          item = i;
        }
      }
      return item;
    }

    this.updateSelection = async (cid) => {
      const {year, day} = cardManager.getIndex(cid);
      if (!year) return;
      await selectYear(year);
      let currentDay;
      for (const dayIndex of dayIndexes) {
        dayIndex.updateSelection(day);
        if (dayIndex.day === day) {
            currentDay = dayIndex;
        }
      }
      if (currentDay) {
        currentDay.fryelement.scrollIntoView({block: 'nearest', inline: 'nearest'});
      }
    }
    this.updateDay = (day, count) => {
      for (const dayIndex of dayIndexes) {
        if (dayIndex.day === day) {
          dayIndex.updateCount(count);
          return;
        }
      }
      appendDay({day, count});
    }
  </script>
