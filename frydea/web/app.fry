from datetime import datetime
from fryhcs import Element
from fryui import HCenter, Icon, Button
from frydea.models import Card as CardModel

def App(cards=None):
  cards = [] if not cards else cards
  <template>
    <div h-screen w-screen overflow-x-auto>
      <Header />
      <Body {cards}/>
    </div>
  </template>

def Header():
  <template>
    <div fixed top-0 w-full h-30px z-100 bg-primary>
    </div>
  </template>
  <script>
  </script>

def Body(cards=None):
  <template>
    <div flex mt-30px h-sub,100%,30px w-full>
      <SideBar/>
      <Main {cards}/>
    </div>
  </template>
  <script>
  </script>

def SideBar():
  <template>
    <div box-border h-full w-30px bg-secondary>
    </div>
  </template>
  <script>
  </script>

def Main(cards=None):
  left = <Index />
  right = <Preview />
  <template>
    <div box-border w-sub,100%,30px mx-auto h-full bg-gray-bg>
      <HCenter {left} {right}>
        <Edit {cards} width="3fr" />
      </HCenter>
    </div>
  </template>
  <script>
  </script>

def Index():
  <template>
    <div bg-secondary-bga>
    </div>
  </template>

def Preview():
  card = CardModel()
  <template>
    <div box-border h-full bg-secondary-bgx overflow-auto>
      <PreviewCard frytemplate ref=(template) {card} />
    </div>
  </template>
  <script>
  </script>

def Edit(cards=None):
  cards = cards if cards else []
  empty_card = CardModel()
  <template>
    <div ref=(container)
         bg-primary-elx box-border h-full overflow-auto
         @keydown=(handleCardKey)>
      <EditorCard frytemplate ref=(template) card={empty_card} />
      {<EditorCard refall=(editorCards) {card}/> for card in cards}
      <div ref=(oparea) w-full text-center mt-30px>
        <Button @click=(newCard) wide info>
          <Icon type="plus" class="h-8 w-8"/>
        </Button>
      </div>
    </div>
  </template>
  <script>
    const newCard = async () => {
        const newcard = await template.create();
        container.insertBefore(newcard.fryelement, oparea);
        editorCards.push(newcard);
        newcard.toCommandMode();
    };
    const handleCardKey = (e) => {
      console.log(e);
      if (!e.target.frycomponents) {
        return;
      }
      let currentCard = e.target.frycomponents[0];
      const toCommandMode = () => {
        currentCard.toCommandMode();
        e.preventDefault();
      };
      const moveDown = () => {
        const index = editorCards.indexOf(currentCard);
        if (index >= 0 && index+1 < editorCards.length) {
          currentCard = editorCards[index+1];
          currentCard.focus();
        }
      }
      const moveUp = () => {
        const index = editorCards.indexOf(currentCard);
        if (index > 0) {
          currentCard = editorCards[index-1];
          currentCard.focus();
        }
      }
      const moveLeft = () => {
        console.log('moveLeft');
      }
      const moveRight = () => {
        console.log('moveRight');
      }
      const deleteCard = (force) => {
        if (!force) {
          
        }
        console.log('deleteCard');
      }
      const broaden = () => {
        this.fryparent.broaden();
      }
      const narrow = () => {
        this.fryparent.narrow();
      }
      const cardKeyMap = {
        Enter: toCommandMode,
        KeyI: toCommandMode,
        KeyJ: moveDown,
        ArrowDown: moveDown,
        KeyK: moveUp,
        ArrowUp: moveUp,
        KeyH: moveLeft,
        ArrowLeft: moveLeft,
        KeyL: moveRight,
        ArrowRight: moveRight,
        KeyA: newCard,
        KeyD: () => {deleteCard(e.shiftKey)},
        KeyB: broaden,
        KeyN: narrow,
      }
      if (e.code in cardKeyMap) {
        cardKeyMap[e.code]();
      }
    };

    if (editorCards.length > 0) {
      editorCards[editorCards.length-1].focus();
    }
  </script>

def EditorCard(card):
  time = card.update_time.strftime('%Y-%m-%d %H:%M')
  <template>
    <div mx-4px w-sub,100%,8px min-h-200px mb-20px
         border border-gray-bdx rounded-md
         focus="outline outline-4 outline-primaryax"
         has-focus="outline outline-2 outline-primaryax"
         flex flex-col
         tabindex="-1"
         ref=(elContainer)>
      <div flex-none h-30px w-full
           flex justify-between 
           bg-gray-el border border-gray-bdx>
        <div flex>
          <Icon type="file-text"/>
          <p>[{card.number}](cardModel.number)</p>
        </div>
        <p>[{time}](cardModel.updateTime)</p>
      </div>
      <div ref=(elContent)
           flex-auto w-full
           bg-secondary-bg overflow-hidden>
      </div>
      <div flex-none w-full h-30px
           bg-gray-el border border-gray-bdx>
      </div>
    </div>
  </template>
  <script card={card.todict()}>
    import { EditorState } from "@codemirror/state";
    import { EditorView, basicSetup } from "codemirror";
    import { markdown } from "@codemirror/lang-markdown";
    import { vim, CodeMirror} from "@replit/codemirror-vim";
    import { createCardModel } from "./frydea.js";
    import { oneDark } from "@codemirror/theme-one-dark";

    let editor;

    const cardModel = createCardModel(card);

    CodeMirror.commands.save = async () => {
      await cardModel.save();
    }

    const createDoc = () => {
      const updator = EditorView.updateListener.of((update) => {
          if (update.docChanged) {
              cardModel.content.value = update.state.doc.toString();
          }
      });
      const frytheme = EditorView.theme({
          "&": {
            color: "white",
            backgroundColor: "#034"
          },
          ".cm-content": {
            caretColor: "#0e9",
            fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,"Liberation Mono", "Courier New", monospace',
          },
          "&.cm-focused .cm-cursor": {
            borderLeftColor: "#0e9"
          },
          "&.cm-focused .cm-selectionBackground, ::selection": {
            backgroundColor: "#074"
          },
          ".cm-gutters": {
            backgroundColor: "#045",
            color: "#ddd",
            border: "none"
          }
        }, {dark: true})

      const state = EditorState.create({
        doc: cardModel.content.peek(),
        extensions: [
          vim(),
          basicSetup,
          markdown(),
          EditorView.lineWrapping,
          updator,
          frytheme,
          //oneDark,
        ]
      })
      return state;
    }

    const createEditor = () => {
      const state = createDoc();
      if (editor) {
        editor.setState(state);
      } else {
        elContent.innerHTML = '';
        editor = new EditorView({
          state,
          parent: elContent,
        });
      }
    }

    createEditor();

    this.toCommandMode = () => {
      editor.focus();
    }

    this.focus = () => {
      elContainer.focus();
    }
  </script>


def PreviewCard(card):
  time = card.update_time.strftime('%Y-%m-%d %H:%M')
  cardId = card.id
  <template>
    <div w-full min-h-200px mb-20px
         border border-gray-bdx rounded-md
         flex flex-col
         tabindex="-1">
      <div flex-none h-30px w-full
           flex justify-between 
           bg-gray-el border border-gray-bdx>
        <div flex>
          <Icon type="file-text"/>
          <p ref=(elNumber)>{card.number}</p>
        </div>
        <p ref=(elUpdateTime)>{time}</p>
      </div>
      <div ref=(elContent)
           flex-auto w-full
           bg-secondary-bg overflow-hidden font-mono>
      </div>
      <div flex-none w-full h-30px
           bg-gray-el border border-gray-bdx>
      </div>
    </div>
  </template>
  <script {cardId}>
    import * as dayjs from "dayjs";
    import { marked } from "marked";
    import { getCard } from "./frydea.js";
    import { effect } from "fryhcs";

    let current = getCard(cardId);

    this.dispose = effect(() => {
      elContent.innerHTML = marked(current.content.value);
      elUpdateTime.textContent = dayjs(card.update_time).format('YYYY-MM-DD HH:mm');
    });

  </script>