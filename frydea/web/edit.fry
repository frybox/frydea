from fryhcs import Element
from fryui import Icon, Button
from frydea.models import Card

def Edit(cards=None):
  cards = cards if cards else []
  empty_card = Card()
  <template>
    <div ref=(container)
         bg-primary-elx box-border h-full overflow-auto
         @keydown=(handleCardKey)>
      <EditorCard frytemplate ref=(template) card={empty_card} />
      {<EditorCard refall=(editorCards) {card}/> for card in cards}
      <div ref=(oparea) w-full text-center mt-30px>
        <Button @click=(newCard) wide info>
          <Icon type="plus" class="h-8 w-8"/>
        </Button>
      </div>
    </div>
  </template>
  <script>
    import { cardManager } from './frydea.js';
    editorCards = editorCards ? editorCards : [];
    document.addEventListener('keydown', function(e) {
        const active = document.activeElement;
        if (e.code === 'Escape' && (!active || !active.frycomponents)) {
            const len = editorCards.length;
            if (len > 0) {
                editorCards[len-1].focus();
            }
        }
    });
    const newCard = async () => {
        const newcard = await template.create();
        container.insertBefore(newcard.fryelement, oparea);
        editorCards.push(newcard);
        newcard.toCommandMode();
        newcard.fryelement.scrollIntoView();
        return newcard;
    };
    const handleCardKey = (e) => {
      console.log(e);
      if (!e.target.frycomponents) {
        return;
      }
      let currentCard = e.target.frycomponents[0];
      const toCommandMode = () => {
        currentCard.toCommandMode();
        e.preventDefault();
      };
      const moveDown = () => {
        const index = editorCards.indexOf(currentCard);
        if (index >= 0 && index+1 < editorCards.length) {
          currentCard = editorCards[index+1];
          currentCard.focus();
        }
      }
      const moveUp = () => {
        const index = editorCards.indexOf(currentCard);
        if (index > 0) {
          currentCard = editorCards[index-1];
          currentCard.focus();
        }
      }
      const moveLeft = () => {
        console.log('moveLeft');
      }
      const moveRight = () => {
        if (this.isReady) {
          let rect = currentCard.fryelement.getBoundingClientRect();
          console.log(rect);
          let middle = rect.top + rect.height/2;
          const previewCard = this.g.previewArea.closest(middle);
          if (previewCard) previewCard.focus();
        }
        console.log('moveRight');
      }
      const deleteCard = (force=false) => {
        if (!force) {
          
        }
        console.log('deleteCard');
      }
      const broadenCard = () => {
        this.fryparent.broaden();
      }
      const narrowCard = () => {
        this.fryparent.narrow();
      }
      const saveCard = async (all=false) => {
        if (!all) {
          await currentCard.save();
        } else {
          for (const card of editorCards) {
            await card.save();
          }
          console.log(`all of ${editorCards.length} cards are saved.`);
        }
      }
      const previewCard = async () => {
        if (this.isReady) {
          const cardId = currentCard.model.cardId;
          await this.g.previewArea.preview(cardId);
        }
      }
      const cardKeyMap = {
        Enter: toCommandMode,
        KeyI: toCommandMode,
        KeyJ: moveDown,
        ArrowDown: moveDown,
        KeyK: moveUp,
        ArrowUp: moveUp,
        KeyH: moveLeft,
        ArrowLeft: moveLeft,
        KeyL: moveRight,
        ArrowRight: moveRight,
        KeyA: newCard,
        KeyD: () => {deleteCard(e.shiftKey)},
        KeyB: broadenCard,
        KeyN: narrowCard,
        KeyW: () => {saveCard(e.shiftKey)},
        KeyP: previewCard,
      }
      if (e.code in cardKeyMap) {
        cardKeyMap[e.code]();
      }
    };

    if (editorCards.length > 0) {
      editorCards[editorCards.length-1].focus();
    }

    this.closest = (y) => {
      let delta = 999999999;
      let card = null;
      for (const c of editorCards) {
        const rect = c.fryelement.getBoundingClientRect();
        const middle = rect.top + rect.height/2;
        const d = Math.abs(middle-y);
        if (d < delta) {
          delta = d;
          card = c;
        }
      }
      return card;
    }
  </script>

def CardSeparator(min_cid, max_cid, count):
    pass

def EditorCard(card):
  time = card.update_time.strftime('%Y-%m-%d %H:%M')
  <template>
    <div mx-4px w-sub,100%,8px min-h-200px mb-20px
         border border-gray-bdx rounded-md
         focus="outline outline-4 outline-primaryax"
         has-focus="outline outline-2 outline-primaryax"
         flex flex-col
         tabindex="-1"
         ref=(elContainer)>
      <div flex-none h-30px w-full
           flex justify-between 
           bg-gray-el border border-gray-bdx>
        <div flex>
          <Icon type="file-text"/>
          <p>[{card.id}](cardModel.displayCid)</p>
        </div>
        <p>[{time}](cardModel.displayTime)</p>
      </div>
      <div ref=(elContent)
           flex-auto w-full
           bg-secondary-bg overflow-hidden>
      </div>
      <div flex-none w-full h-30px
           bg-gray-el border border-gray-bdx>
      </div>
    </div>
  </template>
  <script card={card.todict()}>
    import { EditorState } from "@codemirror/state";
    import { EditorView, basicSetup } from "codemirror";
    import { markdown } from "@codemirror/lang-markdown";
    import { vim, CodeMirror} from "@replit/codemirror-vim";
    import { cardManager } from "./frydea.js";
    import { oneDark } from "@codemirror/theme-one-dark";

    let editor;

    const cardModel = cardManager.createCard(card);

    CodeMirror.commands.save = async () => {
      await cardModel.save();
    }

    const createDoc = () => {
      const updator = EditorView.updateListener.of((update) => {
          if (update.docChanged) {
              cardModel.content.value = update.state.doc.toString();
          }
      });
      const frytheme = EditorView.theme({
          "&": {
            color: "white",
            backgroundColor: "#034"
          },
          ".cm-content": {
            caretColor: "#0e9",
            fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,"Liberation Mono", "Courier New", monospace',
          },
          "&.cm-focused .cm-cursor": {
            borderLeftColor: "#0e9"
          },
          "&.cm-focused .cm-selectionBackground, ::selection": {
            backgroundColor: "#074"
          },
          ".cm-gutters": {
            backgroundColor: "#045",
            color: "#ddd",
            border: "none"
          }
        }, {dark: true})

      const state = EditorState.create({
        doc: cardModel.content.peek(),
        extensions: [
          vim(),
          basicSetup,
          markdown(),
          EditorView.lineWrapping,
          updator,
          frytheme,
          //oneDark,
        ]
      })
      return state;
    }

    const createEditor = () => {
      const state = createDoc();
      if (editor) {
        editor.setState(state);
      } else {
        elContent.innerHTML = '';
        editor = new EditorView({
          state,
          parent: elContent,
        });
      }
    }

    createEditor();

    this.toCommandMode = () => {
      editor.focus();
    }

    this.focus = () => {
      elContainer.focus();
    }

    this.save = async () => {
      await cardModel.save();
    }

    this.model = cardModel;
  </script>

