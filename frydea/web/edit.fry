from fryhcs import Element
from fryui import Icon, Button
from frydea.models import Card

def Edit(items):
  empty_card = Card()
  separator_args = dict(min_cid=0, max_cid=0, count=0)
  def comp(item):
    if isinstance(item, Card):
      return <EditorCard refall=(editItems) card={item} />
    else:
      return <CardSeparator refall=(editItems) {**item} />
  <template>
    <div ref=(container)
         id="edit-area"
         bg-primary-elx box-border h-full overflow-auto
         @dblclick=(handleDoubleClick)
         @focusin=(handleFocusIn)
         @keydown=(handleCardKey)>
      <EditorCard frytemplate ref=(cardTemplate) card={empty_card} />
      <CardSeparator frytemplate ref=(separatorTemplate) {**separator_args} />
      {comp(item) for item in items}
      <div ref=(opArea) w-full text-center mt-30px>
        <Button @click=(newDraftCard) wide info>
          <Icon type="plus" class="h-8 w-8"/>
        </Button>
      </div>
    </div>
  </template>
  <script>
    import { cardManager } from './frydea.js';
    editItems = editItems ? editItems : [];
    document.addEventListener('keydown', function(e) {
        const active = document.activeElement;
        const comp = domComponent(active);
        if (comp && (comp.fryparent.fryname === 'Edit' ||
                     comp.fryparent.fryname === 'Index')) {
          // 当前焦点在Edit区域或Index区域中，不处理
          return;
        }
        if ((e.code === 'Escape' || e.code === 'Enter') && (!active || !active.frycomponents)) {
            const len = editItems.length;
            if (len > 0) {
                editItems[len-1].focus();
            }
        }
    });

    window.addEventListener('beforeunload', (e) => {
      if (!this.isReady) return;
      for (const item of editItems) {
        if (item.isCard && item.model.isDirty) {
          // 根据mdn：https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
          // 如下三行每条语句都可触发弹窗提醒用户
          e.preventDefault();
          event.returnValue = true;
          return true;
        }
      }
    })

    let syncTimeoutId;
    let syncCounter = 0;
    const syncWithServer = async () => {
      console.log("syncWithServer...");
      let dirtyCount = 0;
      try {
        for (const item of editItems) {
          if (item.isCard) {
            if(item.model.isDirty) {
              dirtyCount ++;
              if (!item.model.changedAfterLastCheck) {
                await item.save();
              }
              item.model.changedAfterLastCheck = false;
            }
          }
        }
        if (dirtyCount === 0) {
          syncCounter ++;
          if (syncCounter === 4*12) {
            syncCounter = 0;
            await cardManager.sync();
          }
        } else {
          syncCounter = 0;
        }
      } catch {}
      syncTimeoutId = setTimeout(syncWithServer, 5*60*1000);
    }

    this.ready(syncWithServer);

    const handleDoubleClick = async (e) => {
      const comp = domComponent(e.target);
      if (comp.fryname === 'EditorCard') {
        comp.focus({mode: 'insert'});
      }
    }
    
    const handleFocusIn = async (e) => {
      const comp = domComponent(e.target);
      if (comp.fryname === 'EditorCard') {
        this.g.indexArea.updateSelection(comp.model.cid);
      }
    }
    const newDraftCard = async () => {
        const newcard = await cardTemplate.create();
        container.insertBefore(newcard.fryelement, opArea);
        editItems.push(newcard);
        newcard.focus({mode: 'insert'});
        newcard.fryelement.scrollIntoView({block: 'nearest', inline: 'nearest'});
        return newcard;
    };

    const domComponent = (element) => {
      while (element) {
        if (element.frycomponents && element.frycomponents.length > 0) {
          const len = element.frycomponents.length;
          return element.frycomponents[len-1];
        }
        element = element.parentElement;
      }
    }

    const handleCardKey = (e) => {
      console.log(e);
      let currentItem;
      let isSeparator = false;
      currentItem = domComponent(e.target);
      if (!currentItem) {
        return;
      }
      if (currentItem.isCard) {
        if (e.target === currentItem.fryelement) {
          isSeparator = false;
        } else {
          // CM6编辑器中的事件，不处理
          return;
        }
      } else if (currentItem.isSeparator) {
        isSeparator = true;
      } else {
        return;
      }

      const toVimEditor = () => {
        if (!isSeparator) {
          currentItem.focus({mode: 'normal'});
          e.preventDefault();
        }
      };
      const moveDown = () => {
        if (!isSeparator || !currentItem.isUp) {
          const index = editItems.indexOf(currentItem);
          if (index >= 0 && index+1 < editItems.length) {
            editItems[index+1].focus();
          }
        } else {
          currentItem.focus({position:'end'});
        }
      }
      const moveUp = () => {
        if (!isSeparator || currentItem.isUp) {
          const index = editItems.indexOf(currentItem);
          if (index > 0) {
            currentItem = editItems[index-1];
            if (currentItem.isCard) {
              currentItem.focus();
            } else {
              currentItem.focus({position: 'end'});
            }
          }
        } else {
          currentItem.focus();
        }
      }
      const moveLeft = () => {
        let rect = currentItem.fryelement.getBoundingClientRect();
        let middle = rect.top + rect.height/2;
        const indexItem = this.g.indexArea.closest(middle);
        if (indexItem) indexItem.focus();
        console.log('moveLeft');
      }
      const moveRight = () => {
        let rect = currentItem.fryelement.getBoundingClientRect();
        console.log(rect);
        let middle = rect.top + rect.height/2;
        const previewCard = this.g.previewArea.closest(middle);
        if (previewCard) previewCard.focus();
        console.log('moveRight');
      }
      const moveEnd = (last=flase) => {
        if (editItems.length > 0) {
          if (last) {
            editItems[editItems.length-1].focus();
          } else {
            editItems[0].focus();
          }
        }
      }
      const closeCard = async () => {
        if (!isSeparator) {
          if (currentItem.model.isDirty) {
            console.log("该卡片尚未保存到服务器，不能关闭。请先保存到服务器，或回滚当前修改。");
            return;
          }
          const index = editItems.indexOf(currentItem);
          let prev = null, next = null;
          if (index > 0) {
            prev = editItems[index-1];
          }
          if (index < editItems.length-1) {
            next = editItems[index+1];
          }
          if (prev && prev.isSeparator) {
            if (next && next.isSeparator) {
              // 上下都是separator，需要把两个合二为一
              prev.maxCid = next.maxCid;
              prev.count = prev.count + 1 + next.count;
              this.removeItem(next);
              this.removeItem(currentItem);
              prev.focus({position: 'end'});
            } else {
              // 只有上面是separator，与上面合在一起
              prev.maxCid = currentItem.model.cid;
              prev.count = prev.count + 1;
              this.removeItem(currentItem);
              if (next) {
                // 焦点优先切换到下一张卡片
                next.focus();
              } else {
                // 没有下一张卡片，切换到分割线上
                prev.focus();
              }
            }
          } else {
            if (next && next.isSeparator) {
              // 只有下面是separator，与下面合二为一
              next.minCid = currentItem.model.cid;
              next.count = next.count + 1;
              this.removeItem(currentItem);
              if (prev) {
                // 焦点优先切换到上一张卡片
                prev.focus();
              } else {
                next.focus();
              }
            } else {
              // 上下都不是separator，新建separator
              const cid = currentItem.model.cid;
              const separator = await this.newSeparatorBefore({minCid: cid, maxCid: cid, count: 1}, currentItem);
              this.removeItem(currentItem);
              if (prev) {
                prev.focus();
              } else if (next) {
                next.focus();
              } else {
                separator.focus();
              }
            }
          }
        }
      }
      const deleteCard = (force=false) => {
        if (!force) {
          
        }
        console.log('deleteCard');
      }
      const broadenCard = () => {
        this.fryparent.broaden();
      }
      const narrowCard = () => {
        this.fryparent.narrow();
      }
      const saveCard = async (all=false) => {
        if (!all) {
          if (!isSeparator) {
            await currentItem.save();
          }
        } else {
          for (const item of editItems) {
            if (item.isCard)
              await item.save();
          }
          console.log(`all of ${editItems.length} cards are saved.`);
        }
      }
      const previewCard = async () => {
        if (!isSeparator) {
          const cardId = currentItem.model.cardId;
          await this.g.previewArea.preview({cardId});
        }
      }
      const cardKeyMap = {
        Enter: toVimEditor,
        Space: toVimEditor,
        KeyI: toVimEditor,
        KeyJ: moveDown,
        ArrowDown: moveDown,
        KeyK: moveUp,
        ArrowUp: moveUp,
        KeyH: moveLeft,
        ArrowLeft: moveLeft,
        KeyL: moveRight,
        ArrowRight: moveRight,
        KeyG: () => {moveEnd(e.shiftKey)},
        KeyA: newDraftCard,
        KeyO: newDraftCard,
        KeyC: closeCard,
        KeyD: () => {deleteCard(e.shiftKey)},
        KeyB: broadenCard,
        KeyN: narrowCard,
        KeyW: () => {saveCard(e.shiftKey)},
        KeyP: previewCard,
      }
      if (e.code in cardKeyMap) {
        cardKeyMap[e.code]();
      }
    };
    this.ready(() => {
      if (editItems.length > 0) {
        editItems[editItems.length-1].focus();
      }
    })

    const newItem = async (type, direction, args, item) => {
      const index = editItems.indexOf(item);
      if (index === -1) {
        throw `Invalid item ${item}`;
      }
      let template;
      if (type === 'card')
        template = cardTemplate;
      else
        template = separatorTemplate;
      const newitem = await template.create(args);
      if (direction === 'before') {
        container.insertBefore(newitem.fryelement, item.fryelement);
        editItems.splice(index, 0, newitem);
      } else {
        if (index === editItems.length-1) {
          container.insertBefore(newitem.fryelement, opArea);
          editItems.push(newitem);
        } else {
          item = editItems[index+1];
          container.insertBefore(newitem.fryelement, item.fryelement);
          editItems.splice(index+1, 0, newitem);
        }
      }
      return newitem;
    };

    this.openCard = async (cid) => {
      for (const item of editItems) {
        if (item.isCard) {
          if (item.model.cid === cid) {
            item.focus();
            return;
          }
        } else {
          if (cid >= item.minCid && cid <= item.maxCid) {
            const prevCids = cardManager.sliceBetween(item.minCid, cid);
            const nextCids = cardManager.sliceBetween(cid, item.maxCid);
            let card;
            if (prevCids.length === 1 && nextCids.length === 1) {
              card = await this.newCardBefore({card:{cid}}, item);
              this.removeItem(item);
            } else if (prevCids.length === 1) {
              card = await this.newCardBefore({card:{cid}}, item);
              item.minCid = nextCids[1];
              item.count = nextCids.length - 1;
            } else if (nextCids.length === 1) {
              item.maxCid = prevCids[prevCids.length-2];
              item.count = prevCids.length - 1;
              card = await this.newCardAfter({card:{cid}}, item);
            } else {
              const count = prevCids.length-1;
              const minCid = prevCids[0];
              const maxCid = prevCids[count-1];
              await this.newSeparatorBefore({minCid, maxCid, count}, item)
              card = await this.newCardBefore({card:{cid}}, item);
              item.minCid = nextCids[1];
              item.count = nextCids.length - 1;
            }
            card.focus();
            return;
          }
        }
      }
    };

    this.newCardBefore = async (args, item) => {
        return newItem('card', 'before', args, item);
    };

    this.newCardAfter = async (args, item) => {
      return newItem('card', 'after', args, item);
    };

    this.newSeparatorBefore = async (args, item) => {
      return newItem('separator', 'before', args, item);
    }

    this.newSeparatorAfter = async (args, item) => {
      return newItem('separator', 'after', args, item);
    }

    this.removeItem = (item) => {
      const index = editItems.indexOf(item);
      if (index >= 0) {
        editItems.splice(index, 1);
        item.fryelement.remove();
      }
    };

    this.prevItem = (item) => {
      const index = editItems.indexOf(item);
      if (index > 0) {
        return editItems[index-1];
      }
    }

    this.nextItem = (item) => {
      const index = editItems.indexOf(item);
      if (index < editItems.length-1) {
        return editItems[index+1];
      }
    }
    
    this.closest = (y) => {
      let delta = 999999999;
      let card = null;
      for (const c of editItems) {
        const rect = c.fryelement.getBoundingClientRect();
        const middle = rect.top + rect.height/2;
        const d = Math.abs(middle-y);
        if (d < delta) {
          delta = d;
          card = c;
        }
      }
      return card;
    }
  </script>

def CardSeparator(min_cid, max_cid, count):
  <template>
    <div mt-20px mb-20px mx-4px w-sub,100%,8px
         border border-gray-bdx rounded-md>
      <button ref=(upButton) @click=(expandUp)
              mx-4px w-sub,100%,8px mb-4px
              focus="outline outline-4 outline-primaryax">
        ...
      </button>
      <div text-center font-bold text-lg text-info-tx>
        [{count}](countSignal)张卡片
      </div>
      <button ref=(downButton) @click=(expandDown)
              mx-4px w-sub,100%,8px mt-4px
              focus="outline outline-4 outline-primaryax">
        ...
      </button>
    </div>
  </template>
  <script minCid={min_cid} maxCid={max_cid} {count}>
    import { signal } from 'fryhcs';
    import { cardManager } from './frydea.js';

    const countSignal = signal(count);
    const expandUp = async () => {
      const oldCount = countSignal.peek();
      const len = Math.min(oldCount, 5);
      const [cids, nextCid] = cardManager.sliceRight(minCid, len);
      const newCount = oldCount - len;
      let lastCard;
      for (const cid of cids) {
        const card = {cid};
        lastCard = await this.fryparent.newCardBefore({card}, this);
      }
      if (newCount === 0) {
        this.fryparent.removeItem(this);
        lastCard.focus();
      } else {
        countSignal.value = newCount;
        minCid = nextCid;
        this.fryelement.scrollIntoView({block: 'nearest', inline: 'nearest'});
      }
    };

    const expandDown = async () => {
      const oldCount = countSignal.peek();
      const len = Math.min(oldCount, 5);
      const [cids, prevCid] = cardManager.sliceLeft(maxCid, len);
      const newCount = oldCount - len;
      let firstCard;
      cids.sort((a,b)=>b-a);
      for (const cid of cids) {
        const card = {cid};
        firstCard = await this.fryparent.newCardAfter({card}, this);
      }
      if (newCount === 0) {
        this.fryparent.removeItem(this);
        firstCard.focus();
      } else {
        countSignal.value = newCount;
        maxCid = prevCid;
      }
    };

    Object.defineProperty(this, 'minCid', { get() {return minCid;}, set(value) {minCid = value;} });
    Object.defineProperty(this, 'maxCid', { get() {return maxCid;}, set(value) {maxCid = value;} });
    Object.defineProperty(this, 'count', { get() {return countSignal.peek();}, set(value) {countSignal.value = value} });
    this.isUp = false;
    this.focus = (option={}) => {
      const {position} = option;
      if (!position || position === 'begin') {
        upButton.focus();
        this.isUp = true;
      } else {
        downButton.focus();
        this.isUp = false;
      }
    };
    this.isCard = false;
    this.isSeparator = true;
  </script>


def word_counter(value):
  if not value: return 0
  alnum = False
  count = 0
  for ch in value:
    if ch.isalnum():
      if not alnum:
        alnum = True
        count += 1
    else:
      alnum = False
      if not ch.isspace():
        count += 1
  return count

def EditorCard(card):
  time = card.update_time.strftime('%Y-%m-%d %H:%M')
  word_count = word_counter(card.content)
  <template>
    <div mx-4px w-sub,100%,8px min-h-200px mt-10px mb-10px
         border border-gray-bdx rounded-md
         shadow hover:shadow-md
         focus="outline outline-4 outline-primaryax"
         has-focus="outline outline-2 outline-primaryax"
         flex flex-col
         tabindex="-1"
         ref=(elContainer)>
      <div flex-none h-30px w-full
           flex justify-between items-center
           px-5px
           text-xs text-gray-t
           bg-gray-el border-b border-gray-bdx
           rounded-t-md>
        <div flex justify-center>
          <Icon type="file-text" scale={1}/>
          <p>![{card.id}](cardModel.displayName)</p>
        </div>
        <p>[{time}](cardModel.displayTime)</p>
      </div>
      <div ref=(elContent)
           flex-auto w-full
           bg-hex-034 overflow-hidden>
        <div animate-pulse w-9/10 mx-auto mt-5 h-full space-y-3>
          <div bg-grayx w-full h-2 rounded></div>
          <div bg-grayx w-full h-2 rounded></div>
          <div bg-grayx w-2/5 h-2 rounded></div>
          <div bg-grayx w-full h-2 rounded></div>
          <div bg-grayx w-3/5 h-2 rounded></div>
        </div>
      </div>
      <div flex-none w-full h-30px px-10px
           flex justify-between items-center
           bg-gray-el border-t border-gray-bdx
           text-xs text-grayx
           rounded-b-md>
        <p>[{word_count}](wordCount)<span>个字</span></p>
        <p>[](modeName)</p>
        <div>
          <p hidden ref=(saveDOM)>
            <span ref=(saveButton)>
              <Button info xs @click=(handleSave)>
                保存
              </Button>
            </span>
            <span ref=(savingDOM) bg-info rounded px-4px py-2px>
              <span animate-spin>
                <Icon type="update" />
              </span>
              <span ml-2px>保存中...</span>
            </span>
          </p>
        </div>
      </div>
    </div>
  </template>
  <script card={card.todict()} cardId={0}>
    import { EditorState, Compartment } from "@codemirror/state";
    import { EditorView, basicSetup } from "codemirror";
    import { markdown } from "@codemirror/lang-markdown";
    import { vim, CodeMirror, Vim} from "@replit/codemirror-vim";
    import { cardManager } from "./frydea.js";
    import { oneDark } from "@codemirror/theme-one-dark";
    import { signal, computed } from "fryhcs";

    let editor;
    let cardModel;
    if (cardId) {
      // 前端已经有了该卡片模型对象，如已经建了预览卡片
      cardModel = cardManager.getCard(cardId);
    } else {
      // 调用createCard的三种情况都有可能
      cardModel = await cardManager.createCard(card);
    }

    const setSaveState = (state) => {
      if (state === 'clear') {
        saveDOM.setAttribute('hidden', '');
      } else if (state === 'saving') {
        saveButton.setAttribute('hidden', '');
        savingDOM.removeAttribute('hidden');
        savingDOM.classList.add('flex')
        saveDOM.removeAttribute('hidden');
      } else if (state === 'save') {
        savingDOM.classList.remove('flex');
        savingDOM.setAttribute('hidden', '');
        saveButton.removeAttribute('hidden');
        saveDOM.removeAttribute('hidden');
      }
    }

    const handleSave = async () => {
      setSaveState('saving');
      await cardModel.save();
      setSaveState('clear');
    }

    const wordCounter = (value) => {
      if (!value || value.length === 0)
        return 0;
      let alnum = false;
      let count = 0;
      for (let i=0; i<value.length; i++) {
        const ch = value[i];
        const code = value.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
            (code >= 65 && code <= 90) ||
            (code >= 97 && code <= 122)) {
          // 数字、大写字母、小写字母
          if (!alnum) {
            alnum = true;
            count ++;
          }
        } else {
          alnum = false;
          if (code !== 32 && !(code >= 9 && code <= 13)) {
            // 32: 空格，9：Tab，10：换行，11：垂直Tab，12：换页，13：回车
            count ++;
          }
        }
      }
      return count;
    }
    const wordCount = computed(()=>wordCounter(cardModel.content.value));

    const modeName = signal('');

    const editableCompartment = new Compartment();

    const createDoc = () => {
      const updator = EditorView.updateListener.of((update) => {
          if (update.docChanged) {
              const content = update.state.doc.toString();
              cardModel.content.value = content;
              cardModel.changedAfterLastCheck = true;
          }
          if (cardModel.isDirty) {
            cardModel.displayName.value = `<strong><em>${cardModel.cid}*</em></strong>`;
            setSaveState('save');
          } else {
            cardModel.displayName.value = `${cardModel.cid}`;
            setSaveState('clear');
          }
      });
      const frytheme = EditorView.theme({
          "&": {
            color: "white",
            backgroundColor: "#034"
          },
          ".cm-content": {
            caretColor: "#0e9",
            fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,"Liberation Mono", "Courier New", monospace',
          },
          "&.cm-focused .cm-cursor": {
            borderLeftColor: "#0e9"
          },
          "&.cm-focused .cm-selectionBackground, ::selection": {
            backgroundColor: "#074"
          },
          ".cm-gutters": {
            backgroundColor: "#045",
            color: "#ddd",
            border: "none"
          }
        }, {dark: true})


      const state = EditorState.create({
        doc: cardModel.content.peek(),
        extensions: [
          vim(),
          basicSetup,
          markdown(),
          EditorView.lineWrapping,
          updator,
          editableCompartment.of(EditorView.editable.of(false)),
          frytheme,
          oneDark,
        ]
      })
      return state;
    }

    const createEditor = () => {
      const state = createDoc();
      if (editor) {
        editor.setState(state);
      } else {
        elContent.innerHTML = '';
        editor = new EditorView({
          state,
          parent: elContent,
        });
      }
    }

    createEditor();
    // 让editor.contentDOM在contenteditable="false"的情况下也可接受焦点
    editor.contentDOM.tabIndex='-1';

    editor.contentDOM.addEventListener('focus', () => {
      if (editor && editor.cm && editor.cm.state && editor.cm.state.vim) {
        const vim = editor.cm.state.vim;
        if (vim.insertMode) {
          modeName.value = 'Vim Insert模式';
        } else if (vim.visualMode) {
          modeName.value = 'Vim Visual模式';
        } else {
          modeName.value = 'Vim Normal模式';
        }
      }
    })

    CodeMirror.on(editor.cm, 'vim-mode-change', (e) => {
      // 当前代码在editor.update中执行，所以不能同步执行新的update(dispatch)，
      // 需要放到异步代码(queueMicrotask)中执行
      if (e.mode === 'insert' || e.mode === 'replace') {
        queueMicrotask(() => {
          editor.dispatch({effects: editableCompartment.reconfigure(EditorView.editable.of(true))});
        });
      } else {
        // command mode和visual mode下，editor.contentDOM.contenteditable="false"
        // 这种情况下，浏览器不会展示IME，只会给editor.contentDOM发送正常的键盘keydown按键信息。
        // 由于不会发送compositionstart/compositionupdate/compositionend消息，也不会触发
        // @replit/codemirror-vim删除dom元素再加回来取消IME造成的定位bug。
        queueMicrotask(() => {
          editor.dispatch({effects: editableCompartment.reconfigure(EditorView.editable.of(false))});
        });
      }

      if (e.mode === 'insert') modeName.value = 'Vim Insert Mode';
      else if (e.mode === 'replace') modeName.value = 'Vim Replace Mode';
      else if (e.mode === 'normal') modeName.value = 'Vim Normal Mode';
      else if (e.mode === 'visual') modeName.value = 'Vim Visual Mode';
    });

    CodeMirror.on(editor.cm, 'inputEvent', (e) => {
      if (e.type !== "handleKey") {
        return;
      }
      const vim = editor.cm.state.vim;
      if (!vim || vim.insertMode || vim.visualMode) {
        return;
      }
      if (e.key === '<Up>'   || e.key === 'k' ||
          e.key === '<Down>' || e.key === 'j') {
        vim.lastCM6Index = editor.state.selection.main.head;
      }
    })

    CodeMirror.on(editor.cm, 'vim-keypress', (e) => {
      const vim = editor.cm.state.vim;
      if (!vim || vim.insertMode || vim.visualMode) {
        return;
      }
      const pos = editor.state.selection.main.head;
      if (vim.lastCM6Index !== pos) {
        return;
      }
      vim.lastCM6Index = null;
      if (e === '<Up>' || e === 'k') {
        if (pos === 0) {
          const prev = this.fryparent.prevItem(this);
          if (prev) {
            prev.focus({mode: 'normal', position: 'end'});
          }
        }
      } else if (e === '<Down>' || e === 'j') {
        let maxPos = editor.state.doc.length - 1;
        maxPos = maxPos >= 0 ? maxPos : 0;
        // pos有可能与doc.length相同，比如doc最后一行是空行，或doc内容为空时。
        if (pos >= maxPos) { 
          const next = this.fryparent.nextItem(this);
          if (next) {
            next.focus({mode: 'normal', position: 'begin'});
          }
        }
      }
    });

    this.focus = (option={}) => {
      const {mode, position} = option;
      if (!mode || mode === 'card') {
        elContainer.focus();
      } else if (mode === 'normal' || mode === 'insert') {
        if (editor.cm && editor.cm.state && editor.cm.state.vim) {
          const vim = editor.cm.state.vim;
          if (vim.insertMode || vim.visualMode) {
            Vim.handleKey(editor.cm, '<Esc>', 'user');
          }
          if (position === 'begin') {
            Vim.handleKey(editor.cm, 'gg', 'user');
          } else if (position === 'end') {
            Vim.handleKey(editor.cm, 'G', 'user');
          }
          if (mode === 'insert') {
            Vim.handleKey(editor.cm, 'i', 'user');
          }
        }
        editor.focus();
      } else {
        throw `Invalid card mode: ${mode}`;
      }
    }

    this.save = async () => {
      await handleSave();
    }

    this.model = cardModel;
    this.isCard = true;
    this.isSeparator = false;
  </script>

